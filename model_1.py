import torch.nn as nn
from torchvision.models import resnet50
import torch

'''
   this is the model generated by ChatGPT
'''
class ModifiedResNet50(nn.Module):
    def __init__(self):
        super(ModifiedResNet50, self).__init__()
        original_model = resnet50(pretrained=True)
        
        # 修改第一层以接受4个通道的输入
        # original_model的第一层卷积层的参数是：64个输出通道，7x7卷积核，步长2，填充3
        self.features = nn.Sequential(
            nn.Conv2d(4, 64, kernel_size=7, stride=2, padding=3, bias=False),
            *list(original_model.children())[1:-2]  # 保留原始模型除第一层和最后一层之外的所有层
        )
        
        # 修改分类器以适应二元分类任务
        self.classifier = nn.Linear(2048, 2)  # 假设我们使用平均池化，输出为2048维，目标是2个类别
        
    def forward(self, x):
        x = self.features(x)  # 通过特征提取层
        x = nn.functional.adaptive_avg_pool2d(x, (1, 1))  # 全局平均池化到(1, 1)大小
        x = torch.flatten(x, 1)  # 展平特征向量
        x = self.classifier(x)  # 通过分类器
        return x
    

if __name__ == '__main__':
    model = ModifiedResNet50()
    print(model)


